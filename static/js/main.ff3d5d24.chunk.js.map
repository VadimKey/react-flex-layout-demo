{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["json","global","layout","App","props","console","log","factory","node","getComponent","dangerouslySetInnerHTML","__html","getConfig","text","onAdd","event","layoutRef","current","addTabWithDragAndDropIndirect","component","name","config","state","model","FlexLayout","Model","fromJson","React","createRef","className","onClick","this","Layout","ref","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAMIA,G,YAAO,CACTC,OAAQ,GACRC,OAAQ,CACJ,KAAQ,MACR,OAAU,IACV,SAAY,CACR,CACI,KAAQ,SACR,OAAU,GACV,SAAY,EACZ,SAAY,CACR,CACI,KAAQ,MACR,KAAQ,gBACR,UAAa,OACb,OAAU,CAAC,KAAQ,0LAI/B,CACI,KAAQ,SACR,OAAU,GACV,SAAY,EACZ,SAAY,CACR,CACI,KAAQ,MACR,KAAQ,MACR,UAAa,OACb,OAAU,CAAC,KAAQ,OAI/B,CACE,KAAQ,SACR,OAAU,GACV,SAAY,EACZ,SAAY,CACV,CACE,KAAS,MACT,KAAQ,QACR,UAAa,OACb,OAAU,CAAC,KAAQ,WAgDpBC,E,kDAtCb,WAAYC,GAAQ,IAAD,6BACfC,QAAQC,IAAI,YACZ,cAAMF,IAKVG,QAAU,SAACC,GAEP,GAAkB,SADFA,EAAKC,eAEjB,OAAO,qBAAKC,wBAAyB,CAACC,OAAOH,EAAKI,YAAYC,SAVnD,EAcnBC,MAAQ,SAACC,GACM,EAAKC,UAAUC,QACrBC,8BAA8B,kCAAmC,CACtEC,UAAW,OACXC,KAAM,QACNC,OAAQ,CAACR,KAAM,gBACd,OAjBD,EAAKS,MAAQ,CAACC,MAAOC,IAAWC,MAAMC,SAAS1B,IAC/C,EAAKgB,UAAYW,IAAMC,YAJR,E,qDAwBf,OACE,sBAAKC,UAAU,QAAf,UACE,wBAAQC,QAASC,KAAKjB,MAAtB,iBACA,qBAAKe,UAAU,QAAf,SACE,cAAC,IAAWG,OAAZ,CAAmBC,IAAKF,KAAKf,UACfO,MAAOQ,KAAKT,MAAMC,MAClBhB,QAASwB,KAAKxB,mB,GAhCtBoB,IAAMO,WC3CTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff3d5d24.chunk.js","sourcesContent":["import React from \"react\";\nimport FlexLayout from \"flexlayout-react\";\n\nimport './App.css';\nimport '../node_modules/flexlayout-react/style/dark.css';\n\nvar json = {\n  global: {},\n  layout: {\n      \"type\": \"row\",\n      \"weight\": 100,\n      \"children\": [\n          {\n              \"type\": \"tabset\",\n              \"weight\": 50,\n              \"selected\": 0,\n              \"children\": [\n                  {\n                      \"type\": \"tab\",\n                      \"name\": \"Things to try\",\n                      \"component\": \"text\",\n                      \"config\": {\"text\": \"<ul><li>drag tabs</li><li>drag splitters</li><li>double click on tab to rename</li><li>double click on tabstrip to maximize</li><li>use the Add button to add another tab</li></ul>\"}\n                  }\n              ]\n          },\n          {\n              \"type\": \"tabset\",\n              \"weight\": 50,\n              \"selected\": 0,\n              \"children\": [\n                  {\n                      \"type\": \"tab\",\n                      \"name\": \"two\",\n                      \"component\": \"text\",\n                      \"config\": {\"text\": \"\"}\n                  }\n              ]\n          },\n          {\n            \"type\": \"tabset\",\n            \"weight\": 50,\n            \"selected\": 0,\n            \"children\": [\n              {\n                \"type\":  \"tab\",\n                \"name\": \"three\",\n                \"component\": \"text\",\n                \"config\": {\"text\": \"\"}\n              }\n            ]\n          }\n      ]\n  }\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n      console.log(\"created\");\n      super(props);\n      this.state = {model: FlexLayout.Model.fromJson(json)};\n      this.layoutRef = React.createRef();\n  }\n\n  factory = (node) => {\n      var component = node.getComponent();\n      if (component === \"text\") {\n          return <div dangerouslySetInnerHTML={{__html:node.getConfig().text}}/>;\n      }\n  }\n\n  onAdd = (event) => {\n    let layout = this.layoutRef.current;\n    layout.addTabWithDragAndDropIndirect(\"Add panel<br>(Drag to location)\", {\n      component: \"text\",\n      name: \"added\",\n      config: {text: \"i was added\"}\n    }, null);\n  }\n\n  render() {\n      return (\n        <div className=\"outer\">\n          <button onClick={this.onAdd}>Add</button>\n          <div className=\"inner\">\n            <FlexLayout.Layout ref={this.layoutRef}\n                          model={this.state.model}\n                          factory={this.factory}/>\n          </div>\n        </div>\n      );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}